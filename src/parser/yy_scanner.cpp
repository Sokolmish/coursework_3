#line 1 "yy_scanner.cpp"

#line 3 "yy_scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
#ifdef yy_create_buffer
#define yycore_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer yycore_create_buffer
#endif

#ifdef yy_delete_buffer
#define yycore_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer yycore_delete_buffer
#endif

#ifdef yy_scan_buffer
#define yycore_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer yycore_scan_buffer
#endif

#ifdef yy_scan_string
#define yycore_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string yycore_scan_string
#endif

#ifdef yy_scan_bytes
#define yycore_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes yycore_scan_bytes
#endif

#ifdef yy_init_buffer
#define yycore_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer yycore_init_buffer
#endif

#ifdef yy_flush_buffer
#define yycore_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer yycore_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define yycore_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state yycore_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define yycore_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer yycore_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define yycorepush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state yycorepush_buffer_state
#endif

#ifdef yypop_buffer_state
#define yycorepop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state yycorepop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define yycoreensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack yycoreensure_buffer_stack
#endif

#ifdef yylex
#define yycorelex_ALREADY_DEFINED
#else
#define yylex yycorelex
#endif

#ifdef yyrestart
#define yycorerestart_ALREADY_DEFINED
#else
#define yyrestart yycorerestart
#endif

#ifdef yylex_init
#define yycorelex_init_ALREADY_DEFINED
#else
#define yylex_init yycorelex_init
#endif

#ifdef yylex_init_extra
#define yycorelex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra yycorelex_init_extra
#endif

#ifdef yylex_destroy
#define yycorelex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy yycorelex_destroy
#endif

#ifdef yyget_debug
#define yycoreget_debug_ALREADY_DEFINED
#else
#define yyget_debug yycoreget_debug
#endif

#ifdef yyset_debug
#define yycoreset_debug_ALREADY_DEFINED
#else
#define yyset_debug yycoreset_debug
#endif

#ifdef yyget_extra
#define yycoreget_extra_ALREADY_DEFINED
#else
#define yyget_extra yycoreget_extra
#endif

#ifdef yyset_extra
#define yycoreset_extra_ALREADY_DEFINED
#else
#define yyset_extra yycoreset_extra
#endif

#ifdef yyget_in
#define yycoreget_in_ALREADY_DEFINED
#else
#define yyget_in yycoreget_in
#endif

#ifdef yyset_in
#define yycoreset_in_ALREADY_DEFINED
#else
#define yyset_in yycoreset_in
#endif

#ifdef yyget_out
#define yycoreget_out_ALREADY_DEFINED
#else
#define yyget_out yycoreget_out
#endif

#ifdef yyset_out
#define yycoreset_out_ALREADY_DEFINED
#else
#define yyset_out yycoreset_out
#endif

#ifdef yyget_leng
#define yycoreget_leng_ALREADY_DEFINED
#else
#define yyget_leng yycoreget_leng
#endif

#ifdef yyget_text
#define yycoreget_text_ALREADY_DEFINED
#else
#define yyget_text yycoreget_text
#endif

#ifdef yyget_lineno
#define yycoreget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno yycoreget_lineno
#endif

#ifdef yyset_lineno
#define yycoreset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno yycoreset_lineno
#endif

#ifdef yyget_column
#define yycoreget_column_ALREADY_DEFINED
#else
#define yyget_column yycoreget_column
#endif

#ifdef yyset_column
#define yycoreset_column_ALREADY_DEFINED
#else
#define yyset_column yycoreset_column
#endif

#ifdef yywrap
#define yycorewrap_ALREADY_DEFINED
#else
#define yywrap yycorewrap
#endif

/* %endif */

#ifdef yyalloc
#define yycorealloc_ALREADY_DEFINED
#else
#define yyalloc yycorealloc
#endif

#ifdef yyrealloc
#define yycorerealloc_ALREADY_DEFINED
#else
#define yyrealloc yycorerealloc
#endif

#ifdef yyfree
#define yycorefree_ALREADY_DEFINED
#else
#define yyfree yycorefree
#endif

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* %endif */

/* %if-not-reentrant */
/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

/* %endif */

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yycorewrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

typedef const struct yy_trans_info *yy_state_type;

#define yytext_ptr yytext_r

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 59
#define YY_END_OF_BUFFER 60
struct yy_trans_info
	{
	flex_int16_t yy_verify;
	flex_int16_t yy_nxt;
	};
static const struct yy_trans_info yy_transition[2737] =
    {
 {   0,   0 }, {   0,2609 }, {   0,   0 }, {   0,2607 }, {   1, 260 },
 {   2, 260 }, {   3, 260 }, {   4, 260 }, {   5, 260 }, {   6, 260 },
 {   7, 260 }, {   8, 260 }, {   9, 262 }, {  10, 265 }, {  11, 262 },
 {  12, 262 }, {  13, 260 }, {  14, 260 }, {  15, 260 }, {  16, 260 },
 {  17, 260 }, {  18, 260 }, {  19, 260 }, {  20, 260 }, {  21, 260 },
 {  22, 260 }, {  23, 260 }, {  24, 260 }, {  25, 260 }, {  26, 260 },
 {  27, 260 }, {  28, 260 }, {  29, 260 }, {  30, 260 }, {  31, 260 },
 {  32, 262 }, {  33, 267 }, {  34, 318 }, {  35, 260 }, {  36, 260 },
 {  37, 448 }, {  38, 450 }, {  39, 513 }, {  40, 452 }, {  41, 454 },
 {  42, 462 }, {  43, 643 }, {  44, 645 }, {  45, 647 }, {  46, 664 },

 {  47, 650 }, {  48, 676 }, {  49, 749 }, {  50, 749 }, {  51, 749 },
 {  52, 749 }, {  53, 749 }, {  54, 749 }, {  55, 749 }, {  56, 749 },
 {  57, 749 }, {  58, 652 }, {  59, 654 }, {  60, 674 }, {  61, 678 },
 {  62, 680 }, {  63, 682 }, {  64, 260 }, {  65, 820 }, {  66, 820 },
 {  67, 820 }, {  68, 820 }, {  69, 820 }, {  70, 820 }, {  71, 820 },
 {  72, 820 }, {  73, 820 }, {  74, 820 }, {  75, 820 }, {  76, 820 },
 {  77, 820 }, {  78, 820 }, {  79, 820 }, {  80, 820 }, {  81, 820 },
 {  82, 820 }, {  83, 820 }, {  84, 820 }, {  85, 820 }, {  86, 820 },
 {  87, 820 }, {  88, 820 }, {  89, 820 }, {  90, 820 }, {  91, 684 },
 {  92, 260 }, {  93, 688 }, {  94, 690 }, {  95, 820 }, {  96, 260 },

 {  97, 820 }, {  98, 820 }, {  99, 820 }, { 100, 820 }, { 101, 820 },
 { 102, 820 }, { 103, 820 }, { 104, 820 }, { 105, 820 }, { 106, 820 },
 { 107, 820 }, { 108, 820 }, { 109, 820 }, { 110, 820 }, { 111, 820 },
 { 112, 820 }, { 113, 820 }, { 114, 820 }, { 115, 820 }, { 116, 820 },
 { 117, 820 }, { 118, 820 }, { 119, 820 }, { 120, 820 }, { 121, 820 },
 { 122, 820 }, { 123, 694 }, { 124, 697 }, { 125, 699 }, { 126, 701 },
 { 127, 260 }, { 128, 260 }, {   0,   0 }, {   0,2477 }, {   1, 130 },
 {   2, 130 }, {   3, 130 }, {   4, 130 }, {   5, 130 }, {   6, 130 },
 {   7, 130 }, {   8, 130 }, {   9, 132 }, {  10, 135 }, {  11, 132 },
 {  12, 132 }, {  13, 130 }, {  14, 130 }, {  15, 130 }, {  16, 130 },

 {  17, 130 }, {  18, 130 }, {  19, 130 }, {  20, 130 }, {  21, 130 },
 {  22, 130 }, {  23, 130 }, {  24, 130 }, {  25, 130 }, {  26, 130 },
 {  27, 130 }, {  28, 130 }, {  29, 130 }, {  30, 130 }, {  31, 130 },
 {  32, 132 }, {  33, 137 }, {  34, 188 }, {  35, 130 }, {  36, 130 },
 {  37, 318 }, {  38, 320 }, {  39, 383 }, {  40, 322 }, {  41, 324 },
 {  42, 332 }, {  43, 513 }, {  44, 515 }, {  45, 517 }, {  46, 534 },
 {  47, 520 }, {  48, 546 }, {  49, 619 }, {  50, 619 }, {  51, 619 },
 {  52, 619 }, {  53, 619 }, {  54, 619 }, {  55, 619 }, {  56, 619 },
 {  57, 619 }, {  58, 522 }, {  59, 524 }, {  60, 544 }, {  61, 548 },
 {  62, 550 }, {  63, 552 }, {  64, 130 }, {  65, 690 }, {  66, 690 },

 {  67, 690 }, {  68, 690 }, {  69, 690 }, {  70, 690 }, {  71, 690 },
 {  72, 690 }, {  73, 690 }, {  74, 690 }, {  75, 690 }, {  76, 690 },
 {  77, 690 }, {  78, 690 }, {  79, 690 }, {  80, 690 }, {  81, 690 },
 {  82, 690 }, {  83, 690 }, {  84, 690 }, {  85, 690 }, {  86, 690 },
 {  87, 690 }, {  88, 690 }, {  89, 690 }, {  90, 690 }, {  91, 554 },
 {  92, 130 }, {  93, 558 }, {  94, 560 }, {  95, 690 }, {  96, 130 },
 {  97, 690 }, {  98, 690 }, {  99, 690 }, { 100, 690 }, { 101, 690 },
 { 102, 690 }, { 103, 690 }, { 104, 690 }, { 105, 690 }, { 106, 690 },
 { 107, 690 }, { 108, 690 }, { 109, 690 }, { 110, 690 }, { 111, 690 },
 { 112, 690 }, { 113, 690 }, { 114, 690 }, { 115, 690 }, { 116, 690 },

 { 117, 690 }, { 118, 690 }, { 119, 690 }, { 120, 690 }, { 121, 690 },
 { 122, 690 }, { 123, 564 }, { 124, 567 }, { 125, 569 }, { 126, 571 },
 { 127, 130 }, { 128, 130 }, {   0,  58 }, {   0,2347 }, {   0,  56 },
 {   0,2345 }, {   0,   0 }, {   0,  57 }, {   0,2342 }, {   0,  44 },
 {   0,2340 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   9, 482 },
 {   0,   0 }, {  11, 482 }, {  12, 482 }, {  10, 482 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  32, 482 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,  58 }, {   0,2289 }, {   1, 626 }, {   2, 626 }, {   3, 626 },
 {   4, 626 }, {   5, 626 }, {   6, 626 }, {   7, 626 }, {   8, 626 },
 {   9, 626 }, {  61, 493 }, {  11, 626 }, {  12, 626 }, {  13, 626 },
 {  14, 626 }, {  15, 626 }, {  16, 626 }, {  17, 626 }, {  18, 626 },
 {  19, 626 }, {  20, 626 }, {  21, 626 }, {  22, 626 }, {  23, 626 },
 {  24, 626 }, {  25, 626 }, {  26, 626 }, {  27, 626 }, {  28, 626 },

 {  29, 626 }, {  30, 626 }, {  31, 626 }, {  32, 626 }, {  33, 626 },
 {  34, 445 }, {  35, 626 }, {  36, 626 }, {  37, 626 }, {  38, 626 },
 {  39, 626 }, {  40, 626 }, {  41, 626 }, {  42, 626 }, {  43, 626 },
 {  44, 626 }, {  45, 626 }, {  46, 626 }, {  47, 626 }, {  48, 626 },
 {  49, 626 }, {  50, 626 }, {  51, 626 }, {  52, 626 }, {  53, 626 },
 {  54, 626 }, {  55, 626 }, {  56, 626 }, {  57, 626 }, {  58, 626 },
 {  59, 626 }, {  60, 626 }, {  61, 626 }, {  62, 626 }, {  63, 626 },
 {  64, 626 }, {  65, 626 }, {  66, 626 }, {  67, 626 }, {  68, 626 },
 {  69, 626 }, {  70, 626 }, {  71, 626 }, {  72, 626 }, {  73, 626 },
 {  74, 626 }, {  75, 626 }, {  76, 626 }, {  77, 626 }, {  78, 626 },

 {  79, 626 }, {  80, 626 }, {  81, 626 }, {  82, 626 }, {  83, 626 },
 {  84, 626 }, {  85, 626 }, {  86, 626 }, {  87, 626 }, {  88, 626 },
 {  89, 626 }, {  90, 626 }, {  91, 626 }, {  92, 756 }, {  93, 626 },
 {  94, 626 }, {  95, 626 }, {  96, 626 }, {  97, 626 }, {  98, 626 },
 {  99, 626 }, { 100, 626 }, { 101, 626 }, { 102, 626 }, { 103, 626 },
 { 104, 626 }, { 105, 626 }, { 106, 626 }, { 107, 626 }, { 108, 626 },
 { 109, 626 }, { 110, 626 }, { 111, 626 }, { 112, 626 }, { 113, 626 },
 { 114, 626 }, { 115, 626 }, { 116, 626 }, { 117, 626 }, { 118, 626 },
 { 119, 626 }, { 120, 626 }, { 121, 626 }, { 122, 626 }, { 123, 626 },
 { 124, 626 }, { 125, 626 }, { 126, 626 }, { 127, 626 }, { 128, 626 },

 {   0,  50 }, {   0,2159 }, {   0,  43 }, {   0,2157 }, {   0,  38 },
 {   0,2155 }, {   0,  39 }, {   0,2153 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,  48 },
 {   0,2145 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  38, 318 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  61, 318 }, {   0,   0 }, {  61, 320 },
 {   0,  58 }, {   0,2094 }, {   1, 259 }, {   2, 259 }, {   3, 259 },
 {   4, 259 }, {   5, 259 }, {   6, 259 }, {   7, 259 }, {   8, 259 },
 {   9, 259 }, {  61, 312 }, {  11, 259 }, {  12, 259 }, {  13, 259 },
 {  14, 259 }, {  15, 259 }, {  16, 259 }, {  17, 259 }, {  18, 259 },
 {  19, 259 }, {  20, 259 }, {  21, 259 }, {  22, 259 }, {  23, 259 },
 {  24, 259 }, {  25, 259 }, {  26, 259 }, {  27, 259 }, {  28, 259 },
 {  29, 259 }, {  30, 259 }, {  31, 259 }, {  32, 259 }, {  33, 259 },

 {  34, 259 }, {  35, 259 }, {  36, 259 }, {  37, 259 }, {  38, 259 },
 {   0,   0 }, {  40, 259 }, {  41, 259 }, {  42, 259 }, {  43, 259 },
 {  44, 259 }, {  45, 259 }, {  46, 259 }, {  47, 259 }, {  48, 259 },
 {  49, 259 }, {  50, 259 }, {  51, 259 }, {  52, 259 }, {  53, 259 },
 {  54, 259 }, {  55, 259 }, {  56, 259 }, {  57, 259 }, {  58, 259 },
 {  59, 259 }, {  60, 259 }, {  61, 259 }, {  62, 259 }, {  63, 259 },
 {  64, 259 }, {  65, 259 }, {  66, 259 }, {  67, 259 }, {  68, 259 },
 {  69, 259 }, {  70, 259 }, {  71, 259 }, {  72, 259 }, {  73, 259 },
 {  74, 259 }, {  75, 259 }, {  76, 259 }, {  77, 259 }, {  78, 259 },
 {  79, 259 }, {  80, 259 }, {  81, 259 }, {  82, 259 }, {  83, 259 },

 {  84, 259 }, {  85, 259 }, {  86, 259 }, {  87, 259 }, {  88, 259 },
 {  89, 259 }, {  90, 259 }, {  91, 259 }, {  92, 691 }, {  93, 259 },
 {  94, 259 }, {  95, 259 }, {  96, 259 }, {  97, 259 }, {  98, 259 },
 {  99, 259 }, { 100, 259 }, { 101, 259 }, { 102, 259 }, { 103, 259 },
 { 104, 259 }, { 105, 259 }, { 106, 259 }, { 107, 259 }, { 108, 259 },
 { 109, 259 }, { 110, 259 }, { 111, 259 }, { 112, 259 }, { 113, 259 },
 { 114, 259 }, { 115, 259 }, { 116, 259 }, { 117, 259 }, { 118, 259 },
 { 119, 259 }, { 120, 259 }, { 121, 259 }, { 122, 259 }, { 123, 259 },
 { 124, 259 }, { 125, 259 }, { 126, 259 }, { 127, 259 }, { 128, 259 },
 {   0,  47 }, {   0,1964 }, {   0,  35 }, {   0,1962 }, {   0,  46 },

 {   0,1960 }, {   0,   0 }, {   0,  49 }, {   0,1957 }, {   0,  36 },
 {   0,1955 }, {   0,  32 }, {   0,1953 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,  42 }, {   0,1943 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,  51 }, {   0,1933 }, {   0,   3 }, {   0,1931 },
 {   0,  37 }, {   0,1929 }, {   0,  52 }, {   0,1927 }, {   0,  55 },
 {   0,1925 }, {   0,  40 }, {   0,1923 }, {   0,   0 }, {  43, 136 },
 {   0,  41 }, {   0,1919 }, {   0,  53 }, {   0,1917 }, {   0,   0 },
 {  45, 136 }, {   0,  33 }, {   0,1913 }, {   0,   0 }, {   0,  54 },

 {   0,1910 }, {   0,  34 }, {   0,1908 }, {   0,  45 }, {   0,1906 },
 {   0,   0 }, {   0,   0 }, {  61, 138 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  61, 139 }, {  62, 141 }, {  46, 126 }, {  61, 142 },
 {  48, 670 }, {  49, 670 }, {  50, 670 }, {  51, 670 }, {  52, 670 },
 {  53, 670 }, {  54, 670 }, {  55, 670 }, {  56, 670 }, {  57, 670 },
 {  46, 668 }, {   0,   0 }, {  48, 699 }, {  49, 699 }, {  50, 699 },
 {  51, 699 }, {  52, 699 }, {  53, 699 }, {  54, 699 }, {  55, 699 },
 {  56, 740 }, {  57, 740 }, {  60, 861 }, {  61, 863 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  61, 861 }, {   0,   0 }, {  61, 861 },
 {  62, 864 }, {   0,  56 }, {   0,1863 }, {  69, 772 }, {   0,  57 },

 {   0,1860 }, {   0,   4 }, {   0,1858 }, {   0,   0 }, {  61, 856 },
 {  76, 682 }, {   9,   0 }, {   0,   0 }, {  11,   0 }, {  12,   0 },
 {  10,   0 }, {  61, 851 }, {   0,  31 }, {   0,1847 }, {  85, 697 },
 {   0,   9 }, {   0,1844 }, {  88, 782 }, {   0,  17 }, {   0,1841 },
 {   0,  26 }, {   0,1839 }, {   0,  18 }, {   0,1837 }, {   0,   0 },
 {   0,1835 }, {   0,  15 }, {   0,1833 }, {   0,   0 }, {  32,   0 },
 { 101, 772 }, {   0,  23 }, {   0,1828 }, {   0,  13 }, {   0,1826 },
 {   0,  24 }, {   0,1824 }, { 108, 702 }, {   0,  14 }, {   0,1821 },
 {   0,  25 }, {   0,1819 }, {   0,   0 }, {   0,1817 }, {   0,  16 },
 {   0,1815 }, { 117, 697 }, {   0,   0 }, {  46, 595 }, { 120, 782 },

 {  48, 770 }, {  49, 770 }, {  50, 770 }, {  51, 770 }, {  52, 770 },
 {  53, 770 }, {  54, 770 }, {  55, 770 }, {  56, 770 }, {  57, 770 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  39, 780 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  69, 699 }, {   0,   1 }, {   0,1787 }, { 124, 853 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  76, 772 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  85, 782 }, {   0,   0 }, {  46, 764 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, { 101, 699 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 { 108, 784 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, { 117, 782 },
 {   0,   0 }, {  48, 783 }, {  49, 783 }, {  50, 783 }, {  51, 783 },
 {  52, 783 }, {  53, 783 }, {  54, 783 }, {  55, 783 }, {  56, 783 },
 {  57, 783 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65, 783 }, {  66, 783 },
 {  67, 783 }, {  68, 783 }, {  69, 783 }, {  70, 783 }, {  71, 783 },
 {  72, 783 }, {  73, 783 }, {  74, 783 }, {  75, 783 }, {  76, 783 },

 {  77, 783 }, {  78, 783 }, {  79, 783 }, {  80, 783 }, {  81, 783 },
 {  82, 783 }, {  83, 783 }, {  84, 783 }, {  85, 783 }, {  86, 783 },
 {  87, 783 }, {  88, 783 }, {  89, 783 }, {  90, 783 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  95, 783 }, {   0,   0 },
 {  97, 783 }, {  98, 783 }, {  99, 783 }, { 100, 783 }, { 101, 783 },
 { 102, 783 }, { 103, 783 }, { 104, 783 }, { 105, 783 }, { 106, 783 },
 { 107, 783 }, { 108, 783 }, { 109, 783 }, { 110, 783 }, { 111, 783 },
 { 112, 783 }, { 113, 783 }, { 114, 783 }, { 115, 783 }, { 116, 783 },
 { 117, 783 }, { 118, 783 }, { 119, 783 }, { 120, 783 }, { 121, 783 },
 { 122, 783 }, {   0,   0 }, {   0,1663 }, {   1,   0 }, {   2,   0 },

 {   3,   0 }, {   4,   0 }, {   5,   0 }, {   6,   0 }, {   7,   0 },
 {   8,   0 }, {   9,   0 }, {   0,   0 }, {  11,   0 }, {  12,   0 },
 {  13,   0 }, {  14,   0 }, {  15,   0 }, {  16,   0 }, {  17,   0 },
 {  18,   0 }, {  19,   0 }, {  20,   0 }, {  21,   0 }, {  22,   0 },
 {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 },
 {  28,   0 }, {  29,   0 }, {  30,   0 }, {  31,   0 }, {  32,   0 },
 {  33,   0 }, {  34,-181 }, {  35,   0 }, {  36,   0 }, {  37,   0 },
 {  38,   0 }, {  39,   0 }, {  40,   0 }, {  41,   0 }, {  42,   0 },
 {  43,   0 }, {  44,   0 }, {  45,   0 }, {  46,   0 }, {  47,   0 },
 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 },

 {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 },
 {  58,   0 }, {  59,   0 }, {  60,   0 }, {  61,   0 }, {  62,   0 },
 {  63,   0 }, {  64,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 },
 {  68,   0 }, {  69,   0 }, {  70,   0 }, {  71,   0 }, {  72,   0 },
 {  73,   0 }, {  74,   0 }, {  75,   0 }, {  76,   0 }, {  77,   0 },
 {  78,   0 }, {  79,   0 }, {  80,   0 }, {  81,   0 }, {  82,   0 },
 {  83,   0 }, {  84,   0 }, {  85,   0 }, {  86,   0 }, {  87,   0 },
 {  88,   0 }, {  89,   0 }, {  90,   0 }, {  91,   0 }, {  92, 130 },
 {  93,   0 }, {  94,   0 }, {  95,   0 }, {  96,   0 }, {  97,   0 },
 {  98,   0 }, {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 },

 { 103,   0 }, { 104,   0 }, { 105,   0 }, { 106,   0 }, { 107,   0 },
 { 108,   0 }, { 109,   0 }, { 110,   0 }, { 111,   0 }, { 112,   0 },
 { 113,   0 }, { 114,   0 }, { 115,   0 }, { 116,   0 }, { 117,   0 },
 { 118,   0 }, { 119,   0 }, { 120,   0 }, { 121,   0 }, { 122,   0 },
 { 123,   0 }, { 124,   0 }, { 125,   0 }, { 126,   0 }, { 127,   0 },
 { 128,   0 }, {   0,   0 }, {   0,1533 }, {   1,-130 }, {   2,-130 },
 {   3,-130 }, {   4,-130 }, {   5,-130 }, {   6,-130 }, {   7,-130 },
 {   8,-130 }, {   9,-130 }, {   0,   0 }, {  11,-130 }, {  12,-130 },
 {  13,-130 }, {  14,-130 }, {  15,-130 }, {  16,-130 }, {  17,-130 },
 {  18,-130 }, {  19,-130 }, {  20,-130 }, {  21,-130 }, {  22,-130 },

 {  23,-130 }, {  24,-130 }, {  25,-130 }, {  26,-130 }, {  27,-130 },
 {  28,-130 }, {  29,-130 }, {  30,-130 }, {  31,-130 }, {  32,-130 },
 {  33,-130 }, {  34,-130 }, {  35,-130 }, {  36,-130 }, {  37,-130 },
 {  38,-130 }, {  39,-130 }, {  40,-130 }, {  41,-130 }, {  42,-130 },
 {  43,-130 }, {  44,-130 }, {  45,-130 }, {  46,-130 }, {  47,-130 },
 {  48,-130 }, {  49,-130 }, {  50,-130 }, {  51,-130 }, {  52,-130 },
 {  53,-130 }, {  54,-130 }, {  55,-130 }, {  56,-130 }, {  57,-130 },
 {  58,-130 }, {  59,-130 }, {  60,-130 }, {  61,-130 }, {  62,-130 },
 {  63,-130 }, {  64,-130 }, {  65,-130 }, {  66,-130 }, {  67,-130 },
 {  68,-130 }, {  69,-130 }, {  70,-130 }, {  71,-130 }, {  72,-130 },

 {  73,-130 }, {  74,-130 }, {  75,-130 }, {  76,-130 }, {  77,-130 },
 {  78,-130 }, {  79,-130 }, {  80,-130 }, {  81,-130 }, {  82,-130 },
 {  83,-130 }, {  84,-130 }, {  85,-130 }, {  86,-130 }, {  87,-130 },
 {  88,-130 }, {  89,-130 }, {  90,-130 }, {  91,-130 }, {  92,-130 },
 {  93,-130 }, {  94,-130 }, {  95,-130 }, {  96,-130 }, {  97,-130 },
 {  98,-130 }, {  99,-130 }, { 100,-130 }, { 101,-130 }, { 102,-130 },
 { 103,-130 }, { 104,-130 }, { 105,-130 }, { 106,-130 }, { 107,-130 },
 { 108,-130 }, { 109,-130 }, { 110,-130 }, { 111,-130 }, { 112,-130 },
 { 113,-130 }, { 114,-130 }, { 115,-130 }, { 116,-130 }, { 117,-130 },
 { 118,-130 }, { 119,-130 }, { 120,-130 }, { 121,-130 }, { 122,-130 },

 { 123,-130 }, { 124,-130 }, { 125,-130 }, { 126,-130 }, { 127,-130 },
 { 128,-130 }, {   0,   0 }, {   0,1403 }, {   1,-432 }, {   2,-432 },
 {   3,-432 }, {   4,-432 }, {   5,-432 }, {   6,-432 }, {   7,-432 },
 {   8,-432 }, {   9,-432 }, {   0,   0 }, {  11,-432 }, {  12,-432 },
 {  13,-432 }, {  14,-432 }, {  15,-432 }, {  16,-432 }, {  17,-432 },
 {  18,-432 }, {  19,-432 }, {  20,-432 }, {  21,-432 }, {  22,-432 },
 {  23,-432 }, {  24,-432 }, {  25,-432 }, {  26,-432 }, {  27,-432 },
 {  28,-432 }, {  29,-432 }, {  30,-432 }, {  31,-432 }, {  32,-432 },
 {  33,-432 }, {  34,-432 }, {  35,-432 }, {  36,-432 }, {  37,-432 },
 {  38,-432 }, {  39,-432 }, {  40,-432 }, {  41,-432 }, {  42,-432 },

 {  43,-432 }, {  44,-432 }, {  45,-432 }, {  46,-432 }, {  47,-432 },
 {  48,-432 }, {  49,-432 }, {  50,-432 }, {  51,-432 }, {  52,-432 },
 {  53,-432 }, {  54,-432 }, {  55,-432 }, {  56,-432 }, {  57,-432 },
 {  58,-432 }, {  59,-432 }, {  60,-432 }, {  61,-432 }, {  62,-432 },
 {  63,-432 }, {  64,-432 }, {  65,-432 }, {  66,-432 }, {  67,-432 },
 {  68,-432 }, {  69,-432 }, {  70,-432 }, {  71,-432 }, {  72,-432 },
 {  73,-432 }, {  74,-432 }, {  75,-432 }, {  76,-432 }, {  77,-432 },
 {  78,-432 }, {  79,-432 }, {  80,-432 }, {  81,-432 }, {  82,-432 },
 {  83,-432 }, {  84,-432 }, {  85,-432 }, {  86,-432 }, {  87,-432 },
 {  88,-432 }, {  89,-432 }, {  90,-432 }, {  91,-432 }, {  92,-432 },

 {  93,-432 }, {  94,-432 }, {  95,-432 }, {  96,-432 }, {  97,-432 },
 {  98,-432 }, {  99,-432 }, { 100,-432 }, { 101,-432 }, { 102,-432 },
 { 103,-432 }, { 104,-432 }, { 105,-432 }, { 106,-432 }, { 107,-432 },
 { 108,-432 }, { 109,-432 }, { 110,-432 }, { 111,-432 }, { 112,-432 },
 { 113,-432 }, { 114,-432 }, { 115,-432 }, { 116,-432 }, { 117,-432 },
 { 118,-432 }, { 119,-432 }, { 120, 523 }, { 121,-432 }, { 122,-432 },
 { 123,-432 }, { 124,-432 }, { 125,-432 }, { 126,-432 }, { 127,-432 },
 { 128,-432 }, {   0,   6 }, {   0,1273 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   7 }, {   0,1263 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   3 }, {   0,1249 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   3 }, {   0,1234 }, {   0,   3 }, {   0,1232 }, {   0,   0 },
 {   0,   3 }, {   0,1229 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 },
 {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 },
 {  48, 523 }, {  49, 523 }, {  50, 523 }, {  51, 523 }, {  52, 523 },

 {  53, 523 }, {  54, 523 }, {  55, 523 }, {  56, 523 }, {  57, 523 },
 {   0,   0 }, {  69, 523 }, {  70, 228 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  76, 228 }, {   0,   0 },
 {   0,   0 }, {  69, 552 }, {  70, 220 }, {   0,   0 }, {   0,1191 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  76, 220 }, {  46, -31 },
 {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,  41 },
 {  57,  41 }, {   0,   0 }, {  76, 220 }, { 101, 523 }, { 102, 228 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 { 108, 228 }, {  85, 222 }, {  69,  73 }, { 101, 552 }, { 102, 220 },

 {   0,   0 }, {   0,1159 }, {  76, 212 }, {   0,   0 }, {  76, -17 },
 { 108, 220 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,1149 }, {   0,   0 }, {  85,  -2 }, {   0,   0 },
 {  46, -72 }, {  85, 202 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {   0,   0 }, { 117, 222 }, { 101,  73 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, { 108, 218 },
 {   0,   0 }, { 108,   3 }, {   0,   0 }, {  69,  32 }, { 108, 493 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  43, 480 },
 { 117,  -2 }, {  45, 480 }, {   0,   0 }, { 117, 202 }, {  48, 507 },

 {  49, 507 }, {  50, 507 }, {  51, 507 }, {  52, 507 }, {  53, 507 },
 {  54, 507 }, {  55, 507 }, {  56, 507 }, {  57, 507 }, {  48, 509 },
 {  49, 509 }, {  50, 509 }, {  51, 509 }, {  52, 509 }, {  53, 509 },
 {  54, 509 }, {  55, 509 }, {  56, 509 }, {  57, 509 }, {   0,   0 },
 { 101,  32 }, {   0,   4 }, {   0,1088 }, {   0,   4 }, {   0,1086 },
 {   0,   0 }, {  65, 509 }, {  66, 509 }, {  67, 509 }, {  68, 509 },
 {  69, 509 }, {  70, 509 }, {   0,   0 }, {   0,   4 }, {   0,1076 },
 {   0,   4 }, {   0,1074 }, {   0,  22 }, {   0,1072 }, {   0,  28 },
 {   0,1070 }, {   0,  30 }, {   0,1068 }, {   0,  29 }, {   0,1066 },
 {   0,   0 }, {   0,  21 }, {   0,1063 }, {   0,  19 }, {   0,1061 },

 {   0,  20 }, {   0,1059 }, {   0,  27 }, {   0,1057 }, {   0,   8 },
 {   0,1055 }, {   0,  10 }, {   0,1053 }, {  97, 509 }, {  98, 509 },
 {  99, 509 }, { 100, 509 }, { 101, 509 }, { 102, 509 }, {   0,   6 },
 {   0,1045 }, {   0,   7 }, {   0,1043 }, {  46,-175 }, {   0,   0 },
 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 },
 {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 },
 {   0,   3 }, {   0,1029 }, {   0,   3 }, {   0,1027 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   3 }, {   0,1022 }, {   0,   0 },
 {   0,   0 }, {  69, -71 }, {   0,   0 }, {   0,   3 }, {   0,1016 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  76,   2 }, {  61, 352 },

 {  76, 352 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   1 }, {   0,1004 }, {  85,  12 }, {  61, 345 }, {  85, 354 },
 {  76, 350 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  85, 342 }, {   0,   0 }, { 101, -71 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 { 108,  14 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, { 117,  12 },
 {   0,   0 }, { 117, 354 }, { 108, 352 }, {   0,   0 }, { 108, 352 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, { 117, 342 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {  76, 313 },
 {   0,   0 }, {  85,   2 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 },
 {  69,   0 }, {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 },
 {  74,   0 }, {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 },
 {  79,   0 }, {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 },
 {  84,   0 }, {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 },
 {  89,   0 }, {  90,   0 }, {   0,   0 }, { 117,   2 }, {   0,   0 },

 {   0,   0 }, {  95,   0 }, { 108, 313 }, {  97,   0 }, {  98,   0 },
 {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 },
 { 104,   0 }, { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 },
 { 109,   0 }, { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 },
 { 114,   0 }, { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 },
 { 119,   0 }, { 120,   0 }, { 121,   0 }, { 122,   0 }, {   0,   0 },
 {   0, 880 }, {   1, 359 }, {   2, 359 }, {   3, 359 }, {   4, 359 },
 {   5, 359 }, {   6, 359 }, {   7, 359 }, {   8, 359 }, {   9, 359 },
 {   0,   0 }, {  11, 359 }, {  12, 359 }, {  13, 359 }, {  14, 359 },
 {  15, 359 }, {  16, 359 }, {  17, 359 }, {  18, 359 }, {  19, 359 },

 {  20, 359 }, {  21, 359 }, {  22, 359 }, {  23, 359 }, {  24, 359 },
 {  25, 359 }, {  26, 359 }, {  27, 359 }, {  28, 359 }, {  29, 359 },
 {  30, 359 }, {  31, 359 }, {  32, 359 }, {  33, 359 }, {  34, 359 },
 {  35, 359 }, {  36, 359 }, {  37, 359 }, {  38, 359 }, {  39, 489 },
 {  40, 359 }, {  41, 359 }, {  42, 359 }, {  43, 359 }, {  44, 359 },
 {  45, 359 }, {  46, 359 }, {  47, 359 }, {  48, 359 }, {  49, 359 },
 {  50, 359 }, {  51, 359 }, {  52, 359 }, {  53, 359 }, {  54, 359 },
 {  55, 359 }, {  56, 359 }, {  57, 359 }, {  58, 359 }, {  59, 359 },
 {  60, 359 }, {  61, 359 }, {  62, 359 }, {  63, 359 }, {  64, 359 },
 {  65, 359 }, {  66, 359 }, {  67, 359 }, {  68, 359 }, {  69, 359 },

 {  70, 359 }, {  71, 359 }, {  72, 359 }, {  73, 359 }, {  74, 359 },
 {  75, 359 }, {  76, 359 }, {  77, 359 }, {  78, 359 }, {  79, 359 },
 {  80, 359 }, {  81, 359 }, {  82, 359 }, {  83, 359 }, {  84, 359 },
 {  85, 359 }, {  86, 359 }, {  87, 359 }, {  88, 359 }, {  89, 359 },
 {  90, 359 }, {  91, 359 }, {  92, 359 }, {  93, 359 }, {  94, 359 },
 {  95, 359 }, {  96, 359 }, {  97, 359 }, {  98, 359 }, {  99, 359 },
 { 100, 359 }, { 101, 359 }, { 102, 359 }, { 103, 359 }, { 104, 359 },
 { 105, 359 }, { 106, 359 }, { 107, 359 }, { 108, 359 }, { 109, 359 },
 { 110, 359 }, { 111, 359 }, { 112, 359 }, { 113, 359 }, { 114, 359 },
 { 115, 359 }, { 116, 359 }, { 117, 359 }, { 118, 359 }, { 119, 359 },

 { 120, 359 }, { 121, 359 }, { 122, 359 }, { 123, 359 }, { 124, 359 },
 { 125, 359 }, { 126, 359 }, { 127, 359 }, { 128, 359 }, {   0,   0 },
 {   0, 750 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   6 },
 {   0, 740 }, {   0,   0 }, {   0,   0 }, {   0,   3 }, {   0, 736 },
 {   0,   4 }, {   0, 734 }, {   0,   4 }, {   0, 732 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   4 }, {   0, 726 },
 {   0,   4 }, {   0, 724 }, {   0,   4 }, {   0, 722 }, {   0,  12 },
 {   0, 720 }, {   0,  11 }, {   0, 718 }, {   0,   6 }, {   0, 716 },
 {   0,   5 }, {   0, 714 }, {   0,   0 }, {   0,   0 }, {   0, 711 },

 {   0,   3 }, {   0, 709 }, {   0,   0 }, {  43, 489 }, {   0,   0 },
 {  45, 489 }, {   0,   3 }, {   0, 703 }, {  48, 499 }, {  49, 499 },
 {  50, 499 }, {  51, 499 }, {  52, 499 }, {  53, 499 }, {  54, 499 },
 {  55, 499 }, {  56, 499 }, {  57, 499 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0, 679 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  69, 518 },
 {  70,  24 }, {   0,   0 }, {  43, 521 }, {   0,   0 }, {  45, 521 },
 {   0,   0 }, {  76,  24 }, {  48, 548 }, {  49, 548 }, {  50, 548 },

 {  51, 548 }, {  52, 548 }, {  53, 548 }, {  54, 548 }, {  55, 548 },
 {  56, 548 }, {  57, 548 }, {   0,   5 }, {   0, 652 }, {  85,-291 },
 {  76, 488 }, {  85,   2 }, {   0,   0 }, {   0,   0 }, {   0,   2 },
 {   0, 645 }, {   0,   2 }, {   0, 643 }, {   0,   0 }, {   0,   2 },
 {   0, 640 }, { 101, 518 }, { 102,  24 }, {  85, -10 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, { 108,  24 }, {  48,  27 },
 {  49,  27 }, {  50,  27 }, {  51,  27 }, {  52,  27 }, {  53,  27 },
 {  54,  27 }, {  55,  27 }, {  56,  27 }, {  57,  27 }, {   0,   0 },
 {   0,   0 }, { 117,-291 }, {   0,   0 }, { 117,   2 }, { 108, 488 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 { 117, -10 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {   0,   0 }, {   0,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {  70, -62 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  76, -62 },
 {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 },
 {  70,   0 }, {  76, 412 }, {   0,   0 }, {  76, 415 }, {   0,   0 },
 {   0,   0 }, {  76,  -5 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  85, 414 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  85,  -3 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 { 102, -62 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, { 108, -62 }, {  97,   0 }, {  98,   0 }, {  99,   0 },
 { 100,   0 }, { 101,   0 }, { 102,   0 }, {   0,   0 }, {   0,   0 },
 { 108, 417 }, {   0,   0 }, {   0,   0 }, { 108, 400 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, { 117, 414 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, { 117,  -3 }, {   0,   0 }, {   0, 521 },
 {   1,-1314 }, {   2,-1314 }, {   3,-1314 }, {   4,-1314 }, {   5,-1314 },
 {   6,-1314 }, {   7,-1314 }, {   8,-1314 }, {   9,-1314 }, {   0,   0 },

 {  11,-1314 }, {  12,-1314 }, {  13,-1314 }, {  14,-1314 }, {  15,-1314 },
 {  16,-1314 }, {  17,-1314 }, {  18,-1314 }, {  19,-1314 }, {  20,-1314 },
 {  21,-1314 }, {  22,-1314 }, {  23,-1314 }, {  24,-1314 }, {  25,-1314 },
 {  26,-1314 }, {  27,-1314 }, {  28,-1314 }, {  29,-1314 }, {  30,-1314 },
 {  31,-1314 }, {  32,-1314 }, {  33,-1314 }, {  34,-1314 }, {  35,-1314 },
 {  36,-1314 }, {  37,-1314 }, {  38,-1314 }, {  39,-1314 }, {  40,-1314 },
 {  41,-1314 }, {  42,-1314 }, {  43,-1314 }, {  44,-1314 }, {  45,-1314 },
 {  46,-1314 }, {  47,-1314 }, {  48,-1314 }, {  49,-1314 }, {  50,-1314 },
 {  51,-1314 }, {  52,-1314 }, {  53,-1314 }, {  54,-1314 }, {  55,-1314 },
 {  56,-1314 }, {  57,-1314 }, {  58,-1314 }, {  59,-1314 }, {  60,-1314 },

 {  61,-1314 }, {  62,-1314 }, {  63,-1314 }, {  64,-1314 }, {  65,-1314 },
 {  66,-1314 }, {  67,-1314 }, {  68,-1314 }, {  69,-1314 }, {  70,-1314 },
 {  71,-1314 }, {  72,-1314 }, {  73,-1314 }, {  74,-1314 }, {  75,-1314 },
 {  76,-1314 }, {  77,-1314 }, {  78,-1314 }, {  79,-1314 }, {  80,-1314 },
 {  81,-1314 }, {  82,-1314 }, {  83,-1314 }, {  84,-1314 }, {  85,-1314 },
 {  86,-1314 }, {  87,-1314 }, {  88,-1314 }, {  89,-1314 }, {  90,-1314 },
 {  91,-1314 }, {  92,-1314 }, {  93,-1314 }, {  94,-1314 }, {  95,-1314 },
 {  96,-1314 }, {  97,-1314 }, {  98,-1314 }, {  99,-1314 }, { 100,-1314 },
 { 101,-1314 }, { 102,-1314 }, { 103,-1314 }, { 104,-1314 }, { 105,-1314 },
 { 106,-1314 }, { 107,-1314 }, { 108,-1314 }, { 109,-1314 }, { 110,-1314 },

 { 111,-1314 }, { 112,-1314 }, { 113,-1314 }, { 114,-1314 }, { 115,-1314 },
 { 116,-1314 }, { 117,-1314 }, { 118,-1314 }, { 119,-1314 }, { 120,-1314 },
 { 121,-1314 }, { 122,-1314 }, { 123,-1314 }, { 124,-1314 }, { 125,-1314 },
 { 126,-1314 }, { 127,-1314 }, { 128,-1314 }, {   0,   8 }, {   0, 391 },
 {   1,-1444 }, {   2,-1444 }, {   3,-1444 }, {   4,-1444 }, {   5,-1444 },
 {   6,-1444 }, {   7,-1444 }, {   8,-1444 }, {   9,-1444 }, {   0,   0 },
 {  11,-1444 }, {  12,-1444 }, {  13,-1444 }, {  14,-1444 }, {  15,-1444 },
 {  16,-1444 }, {  17,-1444 }, {  18,-1444 }, {  19,-1444 }, {  20,-1444 },
 {  21,-1444 }, {  22,-1444 }, {  23,-1444 }, {  24,-1444 }, {  25,-1444 },
 {  26,-1444 }, {  27,-1444 }, {  28,-1444 }, {  29,-1444 }, {  30,-1444 },

 {  31,-1444 }, {  32,-1444 }, {  33,-1444 }, {  34,-1444 }, {  35,-1444 },
 {  36,-1444 }, {  37,-1444 }, {  38,-1444 }, {  39,-1444 }, {  40,-1444 },
 {  41,-1444 }, {  42,-1444 }, {  43,-1444 }, {  44,-1444 }, {  45,-1444 },
 {  46,-1444 }, {  47,-1444 }, {  48,-1444 }, {  49,-1444 }, {  50,-1444 },
 {  51,-1444 }, {  52,-1444 }, {  53,-1444 }, {  54,-1444 }, {  55,-1444 },
 {  56,-1444 }, {  57,-1444 }, {  58,-1444 }, {  59,-1444 }, {  60,-1444 },
 {  61,-1444 }, {  62,-1444 }, {  63,-1444 }, {  64,-1444 }, {  65,-1444 },
 {  66,-1444 }, {  67,-1444 }, {  68,-1444 }, {  69,-1444 }, {  70,-1444 },
 {  71,-1444 }, {  72,-1444 }, {  73,-1444 }, {  74,-1444 }, {  75,-1444 },
 {  76,-1444 }, {  77,-1444 }, {  78,-1444 }, {  79,-1444 }, {  80,-1444 },

 {  81,-1444 }, {  82,-1444 }, {  83,-1444 }, {  84,-1444 }, {  85,-1444 },
 {  86,-1444 }, {  87,-1444 }, {  88,-1444 }, {  89,-1444 }, {  90,-1444 },
 {  91,-1444 }, {  92,-1444 }, {  93,-1444 }, {  94,-1444 }, {  95,-1444 },
 {  96,-1444 }, {  97,-1444 }, {  98,-1444 }, {  99,-1444 }, { 100,-1444 },
 { 101,-1444 }, { 102,-1444 }, { 103,-1444 }, { 104,-1444 }, { 105,-1444 },
 { 106,-1444 }, { 107,-1444 }, { 108,-1444 }, { 109,-1444 }, { 110,-1444 },
 { 111,-1444 }, { 112,-1444 }, { 113,-1444 }, { 114,-1444 }, { 115,-1444 },
 { 116,-1444 }, { 117,-1444 }, { 118,-1444 }, { 119,-1444 }, { 120,-1444 },
 { 121,-1444 }, { 122,-1444 }, { 123,-1444 }, { 124,-1444 }, { 125,-1444 },
 { 126,-1444 }, { 127,-1444 }, { 128,-1444 }, {   0,   0 }, {   0, 261 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   6 }, {   0, 251 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   2 },
 {   0, 240 }, {   0,   4 }, {   0, 238 }, {   0,   4 }, {   0, 236 },
 {   0,   0 }, {   0,   2 }, {   0, 233 }, {   0,   2 }, {   0, 231 },
 {   0,   0 }, {   0,   2 }, {   0, 228 }, {   0,   2 }, {   0, 226 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0, 222 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  48,  10 }, {  49,  10 }, {  50,  10 },

 {  51,  10 }, {  52,  10 }, {  53,  10 }, {  54,  10 }, {  55,  10 },
 {  56,  10 }, {  57,  10 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0, 190 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  70,-794 },
 {   0,   0 }, {  43,  69 }, {   0,   0 }, {  45,  69 }, {   0,   0 },
 {  76,-794 }, {  48,  92 }, {  49,  92 }, {  50,  92 }, {  51,  92 },
 {  52,  92 }, {  53,  92 }, {  54,  92 }, {  55,  92 }, {  56,  92 },
 {  57,  92 }, {   0,   7 }, {   0, 163 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   2 }, {   0, 157 }, {   0,   0 },
 {  85,   9 }, {   0,   0 }, {   0, 153 }, {  76,  78 }, {   0,   2 },
 {   0, 150 }, { 102,-794 }, {  85,   2 }, {   0,   2 }, {   0, 146 },
 {   0,   0 }, {   0,   0 }, { 108,-794 }, {  48,  27 }, {  49,  27 },
 {  50,  27 }, {  51,  27 }, {  52,  27 }, {  53,  27 }, {  54,  27 },
 {  55,  27 }, {  56,  27 }, {  57,  27 }, { 108,  83 }, {   0,   6 },
 {   0, 130 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, { 117,   9 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, { 108,  80 }, {   0,   0 }, { 117,   2 },
 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 },

 {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 },
 {  48,  23 }, {  49,  23 }, {  50,  23 }, {  51,  23 }, {  52,  23 },
 {  53,  23 }, {  54,  23 }, {  55,  23 }, {  56,  23 }, {  57,  23 },
 {   0,   0 }, {   0,   0 }, {  70,-880 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  76,-880 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {  85, -74 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, { 102,-880 },

 {  70,-586 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 { 108,-880 }, {  76,-586 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 { 117, -74 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, { 102,-586 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, { 108,-586 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, { 129,  60 },
 {   1,   0 },    };

static const struct yy_trans_info *yy_start_state_list[3] =
    {
    &yy_transition[1],
    &yy_transition[3],
    &yy_transition[133],

    } ;

static const flex_int16_t yy_rule_linenum[59] =
    {   0,
       42,   53,   54,   55,   57,   58,   59,   61,   63,   68,
       69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
       79,   80,   81,   82,   83,   84,   85,   86,   87,   88,
       89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
       99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
      109,  110,  111,  112,  113,  115,  116,  118
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lexer.l"
#define YY_NO_INPUT 1
#line 13 "lexer.l"
    #include <cstdlib>
    #include <string>

    #include "core_driver.hpp"
    #include "common.hpp"
    #include "yy_parser.hpp"

    #include "keywords_hashtable.cpp"

    #define YY_USER_ACTION loc.columns(yyleng);
#line 1255 "yy_scanner.cpp"
#line 1256 "yy_scanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

/* %if-c-only */

static int yy_init_globals ( yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */

int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	errno=0; \
	while ( (result = (int) read( fileno(yyin), buf, (yy_size_t) max_size )) < 0 ) \
	{ \
		if( errno != EINTR) \
		{ \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
			break; \
		} \
		errno=0; \
		clearerr(yyin); \
	}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
/* %% [7.0] user's declarations go here */
#line 32 "lexer.l"



#line 36 "lexer.l"
    // A handy shortcut to the location held by the driver.
    yy::location &loc = drv.location;
    // Code run each time yylex is called.
    loc.step();


#line 1576 "yy_scanner.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yy_start_state_list[yyg->yy_start];
yy_match:
		{
		const struct yy_trans_info *yy_trans_info;

		YY_CHAR yy_c;

		for ( yy_c = YY_SC_TO_UI(*yy_cp);
		      (yy_trans_info = &yy_current_state[yy_c])->
		yy_verify == yy_c;
		      yy_c = YY_SC_TO_UI(*++yy_cp) )
			{
			yy_current_state += yy_trans_info->yy_nxt;

			if ( yy_current_state[-1].yy_nxt )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			}
		}

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_current_state[-1].yy_nxt;

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 59 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 59 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 60 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos + 1;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 42 "lexer.l"
{
                                auto kw = CoreKeywords::lookup(yytext, yyleng);
                                if (kw)
                                    return yy::parser::symbol_type(kw->id, loc);
                                string_id_t id = drv.ctx.getIdentId(yytext, yyleng);
                                if (drv.isDefinedType(id))
                                    return yy::parser::make_TYPE_NAME(id, loc);
                                else
                                    return yy::parser::make_IDENTIFIER(id, loc);
                            }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 53 "lexer.l"
return yy::parser::make_CONSTANT(drv.get_integer(yytext), loc);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 54 "lexer.l"
return yy::parser::make_CONSTANT(drv.get_integer(yytext), loc);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 55 "lexer.l"
return yy::parser::make_CONSTANT(drv.get_integer(yytext), loc);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 57 "lexer.l"
return yy::parser::make_CONSTANT(drv.get_float(yytext, yyleng), loc);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 58 "lexer.l"
return yy::parser::make_CONSTANT(drv.get_float(yytext, yyleng), loc);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 59 "lexer.l"
return yy::parser::make_CONSTANT(drv.get_float(yytext, yyleng), loc);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 61 "lexer.l"
return yy::parser::make_CONSTANT(drv.get_charval(yytext, yyleng), loc);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 63 "lexer.l"
{
                                string_id_t id = drv.ctx.getStringId(yytext, yyleng, true);
                                return yy::parser::make_STRING_LITERAL(id, loc);
                            }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 68 "lexer.l"
return yy::parser::make_ELLIPSIS(loc);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 69 "lexer.l"
return yy::parser::make_RIGHT_ASSIGN(loc);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 70 "lexer.l"
return yy::parser::make_LEFT_ASSIGN(loc);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 71 "lexer.l"
return yy::parser::make_ADD_ASSIGN(loc);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 72 "lexer.l"
return yy::parser::make_SUB_ASSIGN(loc);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 73 "lexer.l"
return yy::parser::make_MUL_ASSIGN(loc);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 74 "lexer.l"
return yy::parser::make_DIV_ASSIGN(loc);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 75 "lexer.l"
return yy::parser::make_MOD_ASSIGN(loc);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 76 "lexer.l"
return yy::parser::make_AND_ASSIGN(loc);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 77 "lexer.l"
return yy::parser::make_XOR_ASSIGN(loc);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 78 "lexer.l"
return yy::parser::make_OR_ASSIGN(loc);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 79 "lexer.l"
return yy::parser::make_RIGHT_OP(loc);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 80 "lexer.l"
return yy::parser::make_LEFT_OP(loc);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 81 "lexer.l"
return yy::parser::make_INC_OP(loc);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 82 "lexer.l"
return yy::parser::make_DEC_OP(loc);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 83 "lexer.l"
return yy::parser::make_PTR_OP(loc);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 84 "lexer.l"
return yy::parser::make_AND_OP(loc);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 85 "lexer.l"
return yy::parser::make_OR_OP(loc);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 86 "lexer.l"
return yy::parser::make_LE_OP(loc);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 87 "lexer.l"
return yy::parser::make_GE_OP(loc);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 88 "lexer.l"
return yy::parser::make_EQ_OP(loc);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 89 "lexer.l"
return yy::parser::make_NE_OP(loc);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 90 "lexer.l"
return yy::parser::make_SEMICOLON(loc);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 91 "lexer.l"
return yy::parser::make_LBRACE(loc);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 92 "lexer.l"
return yy::parser::make_RBRACE(loc);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 93 "lexer.l"
return yy::parser::make_COMMA(loc);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 94 "lexer.l"
return yy::parser::make_COLON(loc);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 95 "lexer.l"
return yy::parser::make_ASSIGN(loc);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 96 "lexer.l"
return yy::parser::make_LPAREN(loc);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 97 "lexer.l"
return yy::parser::make_RPAREN(loc);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 98 "lexer.l"
return yy::parser::make_LBRACKET(loc);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 99 "lexer.l"
return yy::parser::make_RBRACKET(loc);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 100 "lexer.l"
return yy::parser::make_DOT(loc);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 101 "lexer.l"
return yy::parser::make_AMPERSAND(loc);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 102 "lexer.l"
return yy::parser::make_EXCMARK(loc);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 103 "lexer.l"
return yy::parser::make_TILDA(loc);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 104 "lexer.l"
return yy::parser::make_MINUS(loc);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 105 "lexer.l"
return yy::parser::make_PLUS(loc);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 106 "lexer.l"
return yy::parser::make_ASTERISK(loc);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 107 "lexer.l"
return yy::parser::make_SLASH(loc);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 108 "lexer.l"
return yy::parser::make_PERCENT(loc);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 109 "lexer.l"
return yy::parser::make_LANGLE(loc);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 110 "lexer.l"
return yy::parser::make_RANGLE(loc);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 111 "lexer.l"
return yy::parser::make_CIRCUM(loc);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 112 "lexer.l"
return yy::parser::make_VBAR(loc);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 113 "lexer.l"
return yy::parser::make_QUESTMARK(loc);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 115 "lexer.l"
{ loc.step(); }
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 116 "lexer.l"
{ loc.lines(yyleng); loc.step(); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 118 "lexer.l"
{
                    char ch = yytext[0];
                    drv.lexer_error(fmt::format("Unexpected symbol '{:c}' (0x{:02X})", ch, ch));
                }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 123 "lexer.l"
return yy::parser::make_YYEOF(loc);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 125 "lexer.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1966 "yy_scanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yy_start_state_list[yyg->yy_start];

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		yy_current_state += yy_current_state[(*yy_cp ? YY_SC_TO_UI(*yy_cp) : 128)].yy_nxt;
		if ( yy_current_state[-1].yy_nxt )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = yyg->yy_c_buf_p;

	int yy_c = 128;
	const struct yy_trans_info *yy_trans_info;

	yy_trans_info = &yy_current_state[(unsigned int) yy_c];
	yy_current_state += yy_trans_info->yy_nxt;
	yy_is_jam = (yy_trans_info->yy_verify != yy_c);

	if ( ! yy_is_jam )
		{
		if ( yy_current_state[-1].yy_nxt )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		}

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */
/* %endif */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 125 "lexer.l"


void CoreDriver::scan_begin() {
    yylex_init(&scanner);
    yyset_debug(trace_scanning, scanner);
    yy_scan_buffer(text.data(), text.size(), scanner);
//    yy_scan_string(text.c_str(), scanner);
//    bufState = yy_scan_string(text.c_str());
}

void CoreDriver::scan_end() {
//    yy_delete_buffer((YY_BUFFER_STATE)bufState);
    yylex_destroy(scanner);
}


enum class IntSuff {
    ERR, U, L, LL
};

static IntSuff get_int_suff(const char **str) {
    if (tolower((*str)[0]) == 'u') {
        (*str)++;
        return IntSuff::U;
    }
    else if (tolower((*str)[0]) == 'l') {
        (*str)++;
        if ((*str)[1] == (*str)[0]) {
            (*str)++;
            return IntSuff::LL;
        }
        return IntSuff::L;
    }
    else {
        return IntSuff::ERR;
    }
}

AST_Literal CoreDriver::get_integer(const char *str) const {
    const char *endptr, *suff;
    uint64_t val = strtoull(str, (char**)(&endptr), 0);

    AST_Literal res{
        .type = AST_Literal::INTEGER,
        .longCnt = 0,
        .isUnsigned = 0,
        .isFloat = 0,
        .val = { 0ULL },
    };

    suff = endptr;
    while (*endptr) {
        enum IntSuff sf = get_int_suff(&endptr);
        if (sf == IntSuff::U && !res.isUnsigned)
            res.isUnsigned = 1;
        else if (sf == IntSuff::L && !res.longCnt)
            res.longCnt = 1;
        else if (sf == IntSuff::LL && !res.longCnt)
            res.longCnt = 2;
        else
            throw parser_exception(fmt::format("Bad integer suffix: {}", suff), "");
    }

    // TODO: overflow

    if (res.isUnsigned) {
        if (res.longCnt)
            res.val.vu64 = static_cast<uint64_t>(val);
        else
            res.val.vu32 = static_cast<uint32_t>(val);
    }
    else {
        if (res.longCnt)
            res.val.vi64 = static_cast<int64_t>(val);
        else
            res.val.vi32 = static_cast<int32_t>(val);
    }
    return res;
}

AST_Literal CoreDriver::get_float(const char *str, size_t len) const {
    AST_Literal res{
        .type = AST_Literal::FLOAT,
        .longCnt = 0,
        .isUnsigned = 0,
        .isFloat = 0,
        .val = { 0ULL },
    };

    std::string tmpStr(str);
    if (tolower(tmpStr[len - 1]) == 'f') {
        res.isFloat = 1;
        tmpStr.pop_back();
//        tmpStr[len - 1] = '\0';
    }
    else if (tolower(tmpStr[len - 1]) == 'l') {
        throw parser_exception("Long double is not supported", "");
    }

    char *endptr = nullptr;
    if (res.isFloat)
        res.val.vf32 = strtof(tmpStr.c_str(), &endptr);
    else
        res.val.vf64 = strtod(tmpStr.c_str(), &endptr);
    if (*endptr != '\0') {
        throw parser_exception(fmt::format("Wrong floating-point literal: '{}'", tmpStr), "");
    }

    return res;
}

AST_Literal CoreDriver::get_charval(const char *str, size_t len) const {
    AST_Literal res{
        .type = AST_Literal::CHARACTER,
        .longCnt = 0,
        .isUnsigned = 0,
        .isFloat = 0,
        .val = { 0ULL },
    };

    if (len == 3) {
        if (str[1] == '\\')
            throw parser_exception(fmt::format("Wrong character literal: '{}'", str), "");
        res.val.v_char = str[1];
    }
    else {
        if (str[1] != '\\' || !(len == 4 || len == 6))
            throw parser_exception(fmt::format("Wrong character literal: '{}'", str), "");
        if (len == 4) {
            res.val.v_char = unescapeChar(str[2]);
        }
        else {
            if (str[2] != 'x' || !isxdigit(str[3]) || !isxdigit(str[4]))
                throw parser_exception(fmt::format("Wrong character literal: '{}'", str), "");
            res.val.v_char = parseXEscape(str[3], str[4]);
        }
    }

    return res;
}

